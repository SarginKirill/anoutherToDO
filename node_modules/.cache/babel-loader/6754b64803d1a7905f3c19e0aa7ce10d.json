{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { ADD_CATEGORY, ADD_TODO, ADD_USER, DELETE_CATEGORY, EXIT_USER, FILTER_CATEGORY, LOGIN_USER, REMOVE_TODO, TOGGLE_TODO } from \"./actions\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from 'firebase/firestore/lite';\nimport { getDatabase, ref, set, get, child } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDYZNlRecHorQydRO1-i34CbvHgezIVh8M\",\n  authDomain: \"test-a21b4.firebaseapp.com\",\n  projectId: \"test-a21b4\",\n  storageBucket: \"test-a21b4.appspot.com\",\n  messagingSenderId: \"985111483387\",\n  appId: \"1:985111483387:web:60d551dc32c88da990f15e\",\n  databaseURL: 'https://test-a21b4-default-rtdb.europe-west1.firebasedatabase.app/'\n};\nconst firebaseInit = initializeApp(firebaseConfig); // console.log(firebaseInit);\n\nconst link = getFirestore(firebaseInit); // console.log(link);\n\nconst test = new Promise((resolve, reject) => {\n  const dbRef = ref(getDatabase());\n  const initialStateUsers = get(child(dbRef, `users/`)).then(users => {\n    if (users.exists()) {\n      return users;\n    } else {\n      alert('Не получил данные с сервера');\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n});\ntest.then(value => {\n  console.log(value);\n}); // const initialStateUsers = {\n//     users: [\n//         {\n//          name: 'admin',\n//          password: 'admin',\n//          id: 1,\n//          categories: ['Все задачи']\n//         },\n//         {\n//             name: '1',\n//             password: '1',\n//             id: 2,\n//             categories: ['Все задачи', 'категория'],\n//         }\n//     ]\n// }\n\nconst initialStateTasks = {\n  chooseCategory: 'Все задачи',\n  todos: [{\n    text: 'Tst todo from state',\n    userID: 2,\n    taskID: 1,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test tdo from state',\n    userID: 1,\n    taskID: 12,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test todo frm state',\n    userID: 2,\n    taskID: 18,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test todo from sate',\n    userID: 2,\n    taskID: 112,\n    completed: false,\n    cat: 'Все задачи'\n  }]\n};\n\nconst taskReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateTasks;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_TODO:\n      //A\n      const test = [...state.todos].find(el => el.taskID === action.payload.taskID);\n      test.completed = !test.completed;\n      return { ...state,\n        todos: [...state.todos]\n      };\n\n    case REMOVE_TODO:\n      //A\n      const task = [...state.todos].indexOf(action.payload);\n      state.todos.splice(task, 1);\n      return { ...state,\n        todos: [...state.todos]\n      };\n\n    case ADD_TODO:\n      //A\n      return { ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case DELETE_CATEGORY:\n      //A\n      action.tasks.todos.map((task, index) => {\n        if (task.completed && task.cat === action.filter) {\n          state.todos.splice(index, 1);\n        }\n      });\n      return { ...state,\n        chooseCategory: 'Все задачи'\n      };\n\n    case FILTER_CATEGORY:\n      return { ...state,\n        chooseCategory: action.payload\n      };\n\n    case EXIT_USER:\n      return { ...state,\n        chooseCategory: 'Все задачи'\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateUsers;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_USER:\n      //A\n      return { ...state,\n        userOnline: action.payload,\n        users: [...state.users, action.payload]\n      };\n\n    case LOGIN_USER:\n      //A\n      return { ...state,\n        userOnline: action.payload\n      };\n\n    case EXIT_USER:\n      return { ...state,\n        userOnline: null\n      };\n\n    case ADD_CATEGORY:\n      //A\n      const user = action.payload.user;\n      const text = action.payload.value;\n      const globalUsers = state.users.find(userOfAll => userOfAll.id === user.id);\n      globalUsers.categories.push(text);\n      return { ...state,\n        userOnline: { ...user\n        }\n      };\n\n    case DELETE_CATEGORY:\n      //A\n      const userOnline = state.userOnline;\n      const allTodos = action.tasks.todos;\n      const actionTodos = allTodos.filter(task => task.cat === action.filter);\n      actionTodos.map((task, index) => {\n        if (!task.completed) {\n          task.cat = 'Все задачи';\n        } else {\n          actionTodos.splice(index, 1);\n        }\n      });\n      const removeCategory = [...userOnline.categories].indexOf(action.filter);\n      userOnline.categories.splice(removeCategory, 1);\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}; // function writeUserData(name, password, id, categories) {\n//     const db = getDatabase();\n//     set(ref(db, 'users/' + id), {\n//       name: name,\n//       password: password,\n//       id: id,\n//       categories: categories\n//     });\n//   }\n//   function writeTodosData(text, userID, taskID, completed, cat) {\n//     const db = getDatabase()\n//     set(ref(db, 'todos/' + taskID), {\n//         text,\n//         userID,\n//         taskID,\n//         completed,\n//         cat\n//     })\n//   }\n//   initialStateUsers.users.map((user) => {\n//     writeUserData(user.name, user.password, user.id, user.categories)\n//   })\n//   initialStateTasks.todos.map((task) => {\n//     writeTodosData(task.text, task.userID, task.taskID, task.completed, task.cat)\n//   })\n//   const dbRef = ref(getDatabase())\n//   get(child(dbRef, `testName/`)).then((action) => {\n//     if (action.exists()) {\n//       console.log(action.val());\n//     } else {\n//       console.log(\"No data available\");\n//     }\n//   }).catch((error) => {\n//     console.error(error);\n//   });\n//   get(child(dbRef, `todos`))\n//   .then((todos) =>{\n//     if (todos.exists()) {\n//         console.log(todos.val())\n//     }else {\n//         console.log(\"No data available\");\n//       }\n//     }).catch((error) => {\n//       console.error(error);\n//     });\n\n\nexport const rootReducer = combineReducers({\n  taskData: taskReducer,\n  userData: userReducer\n});","map":{"version":3,"names":["combineReducers","ADD_CATEGORY","ADD_TODO","ADD_USER","DELETE_CATEGORY","EXIT_USER","FILTER_CATEGORY","LOGIN_USER","REMOVE_TODO","TOGGLE_TODO","initializeApp","getFirestore","getDatabase","ref","set","get","child","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","firebaseInit","link","test","Promise","resolve","reject","dbRef","initialStateUsers","then","users","exists","alert","catch","error","console","log","value","initialStateTasks","chooseCategory","todos","text","userID","taskID","completed","cat","taskReducer","state","action","type","find","el","payload","task","indexOf","splice","tasks","map","index","filter","userReducer","userOnline","user","globalUsers","userOfAll","id","categories","push","allTodos","actionTodos","removeCategory","rootReducer","taskData","userData"],"sources":["/Users/kirill_sargin/My Files/Projects/React/another-todo/src/Redux/reducers.js"],"sourcesContent":["import { combineReducers } from \"redux\";\nimport { ADD_CATEGORY, ADD_TODO, ADD_USER, DELETE_CATEGORY, EXIT_USER, FILTER_CATEGORY, LOGIN_USER, REMOVE_TODO, TOGGLE_TODO } from \"./actions\";\n\n\n\n\n\n\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from 'firebase/firestore/lite'\nimport { getDatabase, ref, set, get, child } from \"firebase/database\";\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDYZNlRecHorQydRO1-i34CbvHgezIVh8M\",\n  authDomain: \"test-a21b4.firebaseapp.com\",\n  projectId: \"test-a21b4\",\n  storageBucket: \"test-a21b4.appspot.com\",\n  messagingSenderId: \"985111483387\",\n  appId: \"1:985111483387:web:60d551dc32c88da990f15e\",\n  databaseURL: 'https://test-a21b4-default-rtdb.europe-west1.firebasedatabase.app/'\n}\n\nconst firebaseInit = initializeApp(firebaseConfig)\n// console.log(firebaseInit);\n\nconst link = getFirestore(firebaseInit)\n// console.log(link);\n\nconst test = new Promise((resolve, reject) => {\n    const dbRef = ref(getDatabase())\nconst initialStateUsers = get(child(dbRef, `users/`)).then((users) => {\n    if(users.exists()){\n        return users\n    }else{\n        alert('Не получил данные с сервера')\n    }\n}).catch((error) => {\n    console.log(error);\n})\n})\n\ntest.then((value) => {\n    console.log(value)\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const initialStateUsers = {\n//     users: [\n//         {\n//          name: 'admin',\n//          password: 'admin',\n//          id: 1,\n//          categories: ['Все задачи']\n//         },\n//         {\n//             name: '1',\n//             password: '1',\n//             id: 2,\n//             categories: ['Все задачи', 'категория'],\n//         }\n//     ]\n// }\n\nconst initialStateTasks = {\n    chooseCategory: 'Все задачи',\n    todos: [\n        {\n            text: 'Tst todo from state',\n            userID: 2,\n            taskID: 1,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test tdo from state',\n            userID: 1,\n            taskID: 12,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test todo frm state',\n            userID: 2,\n            taskID: 18,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test todo from sate',\n            userID: 2,\n            taskID: 112,\n            completed: false,\n            cat: 'Все задачи'\n        },\n    ]\n}\n\nconst taskReducer = (state = initialStateTasks, action) => {\n    switch (action.type){\n        case TOGGLE_TODO: //A\n            const test = [...state.todos].find((el) => (el.taskID === action.payload.taskID))\n            test.completed = !test.completed\n            \n            return {\n                ...state,\n                todos: [...state.todos] \n            }\n\n        case REMOVE_TODO: //A\n            const task = [...state.todos].indexOf(action.payload)\n            state.todos.splice(task, 1)\n            \n            return {\n                ...state,\n                todos: [...state.todos]\n            }\n\n        case ADD_TODO: //A\n            return{\n                ...state,\n                todos: [...state.todos, action.payload]\n            }\n\n        case DELETE_CATEGORY: //A\n            action.tasks.todos.map((task, index) => {\n                if (task.completed && task.cat === action.filter){\n                    state.todos.splice(index, 1)\n                }\n            })\n            return {\n                ...state,\n                chooseCategory: 'Все задачи'\n            }\n\n        case FILTER_CATEGORY:\n            return{\n                ...state,\n                chooseCategory: action.payload\n            }\n\n        case EXIT_USER:\n            return {\n                ...state,\n                chooseCategory: 'Все задачи'\n            }\n\n        \n\n\n        default:\n            return state\n    }\n\n}\n\n\n\nconst userReducer = (state = initialStateUsers, action) => {\n    switch (action.type){\n        case ADD_USER: //A\n            return {\n                ...state,\n                userOnline: action.payload,\n                users: [...state.users, action.payload]\n            }\n        \n        case LOGIN_USER: //A\n            return {\n                ...state,\n                userOnline: action.payload\n            }\n\n        case EXIT_USER:\n            return {\n                ...state,\n                userOnline: null\n            }\n        \n        case ADD_CATEGORY: //A\n            const user = action.payload.user\n            const text = action.payload.value\n\n            const globalUsers = state.users.find((userOfAll) => userOfAll.id === user.id)\n            globalUsers.categories.push(text)\n\n            return {\n                ...state,\n                userOnline: {...user}\n                \n            }\n \n            case DELETE_CATEGORY:  //A\n                const userOnline = state.userOnline\n                const allTodos = action.tasks.todos\n\n                const actionTodos = allTodos.filter((task) => task.cat === action.filter)\n\n                actionTodos.map((task, index) => {\n                    if (!task.completed){\n                        task.cat = 'Все задачи'\n                    }else{\n                        actionTodos.splice(index, 1)\n                    }\n\n                   \n                })\n\n                const removeCategory = [...userOnline.categories].indexOf(action.filter)\n                userOnline.categories.splice(removeCategory, 1)\n    \n                return {\n                    ...state,\n    \n                }\n            \n            \n\n\n        default:\n            \n            return state\n    }\n}\n\n\n\n\n\n\n\n\n// function writeUserData(name, password, id, categories) {\n//     const db = getDatabase();\n//     set(ref(db, 'users/' + id), {\n//       name: name,\n//       password: password,\n//       id: id,\n//       categories: categories\n//     });\n//   }\n\n//   function writeTodosData(text, userID, taskID, completed, cat) {\n//     const db = getDatabase()\n//     set(ref(db, 'todos/' + taskID), {\n//         text,\n//         userID,\n//         taskID,\n//         completed,\n//         cat\n//     })\n//   }\n\n//   initialStateUsers.users.map((user) => {\n//     writeUserData(user.name, user.password, user.id, user.categories)\n//   })\n\n//   initialStateTasks.todos.map((task) => {\n//     writeTodosData(task.text, task.userID, task.taskID, task.completed, task.cat)\n//   })\n\n//   const dbRef = ref(getDatabase())\n\n  \n\n//   get(child(dbRef, `testName/`)).then((action) => {\n//     if (action.exists()) {\n//       console.log(action.val());\n//     } else {\n//       console.log(\"No data available\");\n//     }\n//   }).catch((error) => {\n//     console.error(error);\n//   });\n\n\n//   get(child(dbRef, `todos`))\n//   .then((todos) =>{\n//     if (todos.exists()) {\n//         console.log(todos.val())\n//     }else {\n//         console.log(\"No data available\");\n//       }\n//     }).catch((error) => {\n//       console.error(error);\n//     });\n  \n\n\n  \n\n\n\n\nexport const rootReducer = combineReducers({taskData: taskReducer, userData: userReducer})"],"mappings":"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"},"metadata":{},"sourceType":"module"}