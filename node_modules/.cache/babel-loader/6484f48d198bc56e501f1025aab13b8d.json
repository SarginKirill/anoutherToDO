{"ast":null,"code":"import { toHaveStyle } from \"@testing-library/jest-dom/dist/matchers\";\nimport { combineReducers } from \"redux\";\nimport { ADD_CATEGORY, ADD_TODO, ADD_USER, DELETE_CATEGORY, EXIT_USER, LOGIN_USER, REMOVE_TODO, TOGGLE_TODO } from \"./actions\";\nconst initialStateUsers = {\n  users: [{\n    name: 'admin',\n    password: 'admin',\n    id: 1,\n    categories: ['Все задачи']\n  }, {\n    name: '1',\n    password: '1',\n    id: 2,\n    categories: ['Все задачи', 'категория']\n  }]\n};\nconst initialStateTasks = {\n  todos: [{\n    text: 'Tst todo from state',\n    userID: 2,\n    taskID: 1,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test tdo from state',\n    userID: 1,\n    taskID: 12,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test todo frm state',\n    userID: 2,\n    taskID: 18,\n    completed: false,\n    cat: 'Все задачи'\n  }, {\n    text: 'Test todo from sate',\n    userID: 2,\n    taskID: 112,\n    completed: false,\n    cat: 'Все задачи'\n  }]\n};\n\nconst taskReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateTasks;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_TODO:\n      const test = [...state.todos].find(el => el.taskID === action.payload.taskID);\n      test.completed = !test.completed;\n      return { ...state,\n        todos: [...state.todos]\n      };\n\n    case REMOVE_TODO:\n      const task = [...state.todos].indexOf(action.payload);\n      state.todos.splice(task, 1);\n      return { ...state,\n        todos: [...state.todos]\n      };\n\n    case ADD_TODO:\n      return { ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case DELETE_CATEGORY:\n      console.log(action);\n      action.tasks.todos.map((task, index) => {\n        if (task.completed) {\n          [...state.todos].splice(index, 1);\n        }\n      });\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateUsers;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_USER:\n      return { ...state,\n        userOnline: action.payload,\n        users: [...state.users, action.payload]\n      };\n\n    case LOGIN_USER:\n      return { ...state,\n        userOnline: action.payload\n      };\n\n    case EXIT_USER:\n      return { ...state,\n        userOnline: null\n      };\n\n    case ADD_CATEGORY:\n      const user = action.payload.user;\n      const text = action.payload.value;\n      const globalUsers = state.users.find(userOfAll => userOfAll.id === user.id);\n      globalUsers.categories.push(text);\n      return { ...state,\n        userOnline: { ...user\n        }\n      };\n\n    case DELETE_CATEGORY:\n      const userOnline = state.userOnline;\n      const allTodos = action.tasks.todos;\n      const actionTodos = allTodos.filter(task => task.cat === action.filter);\n      actionTodos.map((task, index) => {\n        if (!task.completed) {\n          task.cat = 'Все задачи';\n        } else {\n          actionTodos.splice(index, 1);\n        }\n      });\n      const removeCategory = [...userOnline.categories].indexOf(action.filter);\n      userOnline.categories.splice(removeCategory, 1);\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  taskData: taskReducer,\n  userData: userReducer\n});","map":{"version":3,"names":["toHaveStyle","combineReducers","ADD_CATEGORY","ADD_TODO","ADD_USER","DELETE_CATEGORY","EXIT_USER","LOGIN_USER","REMOVE_TODO","TOGGLE_TODO","initialStateUsers","users","name","password","id","categories","initialStateTasks","todos","text","userID","taskID","completed","cat","taskReducer","state","action","type","test","find","el","payload","task","indexOf","splice","console","log","tasks","map","index","userReducer","userOnline","user","value","globalUsers","userOfAll","push","allTodos","actionTodos","filter","removeCategory","rootReducer","taskData","userData"],"sources":["/Users/kirill_sargin/My Files/Projects/React/another-todo/src/Redux/reducers.js"],"sourcesContent":["import { toHaveStyle } from \"@testing-library/jest-dom/dist/matchers\";\nimport { combineReducers } from \"redux\";\nimport { ADD_CATEGORY, ADD_TODO, ADD_USER, DELETE_CATEGORY, EXIT_USER, LOGIN_USER, REMOVE_TODO, TOGGLE_TODO } from \"./actions\";\n\n\nconst initialStateUsers = {\n    users: [\n        {\n         name: 'admin',\n         password: 'admin',\n         id: 1,\n         categories: ['Все задачи']\n        },\n        {\n            name: '1',\n            password: '1',\n            id: 2,\n            categories: ['Все задачи', 'категория'],\n        }\n    ]\n}\n\nconst initialStateTasks = {\n    todos: [\n        {\n            text: 'Tst todo from state',\n            userID: 2,\n            taskID: 1,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test tdo from state',\n            userID: 1,\n            taskID: 12,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test todo frm state',\n            userID: 2,\n            taskID: 18,\n            completed: false,\n            cat: 'Все задачи'\n        },\n        {\n            text: 'Test todo from sate',\n            userID: 2,\n            taskID: 112,\n            completed: false,\n            cat: 'Все задачи'\n        },\n    ]\n}\n\nconst taskReducer = (state = initialStateTasks, action) => {\n    switch (action.type){\n        case TOGGLE_TODO:\n            const test = [...state.todos].find((el) => (el.taskID === action.payload.taskID))\n            test.completed = !test.completed\n            \n            return {\n                ...state,\n                todos: [...state.todos] \n            }\n\n        case REMOVE_TODO:\n            const task = [...state.todos].indexOf(action.payload)\n            state.todos.splice(task, 1)\n            \n            return {\n                ...state,\n                todos: [...state.todos]\n            }\n\n        case ADD_TODO:\n            return{\n                ...state,\n                todos: [...state.todos, action.payload]\n            }\n\n        case DELETE_CATEGORY:\n            console.log(action)\n            action.tasks.todos.map((task, index) => {\n                if (task.completed){\n                    [...state.todos].splice(index, 1)\n                }\n            })\n\n        return{\n            ...state\n        }\n\n        \n\n\n        default:\n            return state\n    }\n\n}\n\n\n\nconst userReducer = (state = initialStateUsers, action) => {\n    switch (action.type){\n        case ADD_USER:\n            return {\n                ...state,\n                userOnline: action.payload,\n                users: [...state.users, action.payload]\n            }\n        \n        case LOGIN_USER:\n            return {\n                ...state,\n                userOnline: action.payload\n            }\n\n        case EXIT_USER:\n            return {\n                ...state,\n                userOnline: null\n            }\n        \n        case ADD_CATEGORY:\n            const user = action.payload.user\n            const text = action.payload.value\n\n            const globalUsers = state.users.find((userOfAll) => userOfAll.id === user.id)\n            globalUsers.categories.push(text)\n\n            return {\n                ...state,\n                userOnline: {...user}\n                \n            }\n\n            case DELETE_CATEGORY:\n                const userOnline = state.userOnline\n                const allTodos = action.tasks.todos\n\n                const actionTodos = allTodos.filter((task) => task.cat === action.filter)\n\n                actionTodos.map((task, index) => {\n                    if (!task.completed){\n                        task.cat = 'Все задачи'\n                    }else{\n                        actionTodos.splice(index, 1)\n                    }\n\n                   \n                })\n\n                const removeCategory = [...userOnline.categories].indexOf(action.filter)\n                userOnline.categories.splice(removeCategory, 1)\n    \n                return {\n                    ...state,\n    \n                }\n            \n            \n\n\n        default:\n            return state\n    }\n}\n\n\nexport const rootReducer = combineReducers({taskData: taskReducer, userData: userReducer})"],"mappings":"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"},"metadata":{},"sourceType":"module"}